useful links: http://logos.cs.uic.edu/366/notes/mips%20quick%20tutorial.htm
              http://www.disca.upv.es/spetit/spim.htm
              https://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/
              
                        Gnome   BubbleSort  MergeSort	  InsertionSort	  HeapSort
Time Complexity(Worst)	O(N^2)	O(n*n)		  U(nlogn)    O(n*n)		      O(nlogn)
Auxiliary Space		      O(1)	  O(1)		    O(n)		    O(1)		        O(1)
Best Option		          YES	    NO(change)	NO		      NO		          YES

We need:
~Auxiliary Space: O(1) (use same data positions, no access to additional ones)
~Smallest Time Complexity
Best option: Gnome or HeapSort

Gnome:
int index = 0; 
while (index < n) { 
  if (index == 0) 
    index++; 
  if (arr[index] >= arr[index - 1]) 
    index++; 
  else { 
    swap(arr[index], arr[index - 1]); 
    index--; 
  } 
} 

OR 

    // Build heap (rearrange array) 
    for (int i = n / 2 - 1; i >= 0; i--) 
        heapify(arr, n, i); 

    int largest = i; // Initialize largest as root 
    int l = 2*i + 1; // left = 2*i + 1 
    int r = 2*i + 2; // right = 2*i + 2 
  
    // If left child is larger than root 
    if (l < n && arr[l] > arr[largest]) 
        largest = l; 
  
    // If right child is larger than largest so far 
    if (r < n && arr[r] > arr[largest]) 
        largest = r; 
  
    // If largest is not root 
    if (largest != i) 
    { 
        swap(arr[i], arr[largest]); 
  
        // Recursively heapify the affected sub-tree 
        heapify(arr, n, largest); 
    } 

PC : 0X400000 
F10: each step
F5: all


#this will be removed
printArray: la $t0, array       # load array to temporary variable t0
            li $t1, 1000        # load immediate into t1, n: number of elements in array
            lb $t5, 0($t0)      # load first element of array to t4
            li $t3, 0           # load index
loop:
        li $v0, 1           # load appropriate system call code into register $v0, code for int is 1
        move $a0, $t5       # move integer to be printed into $a0:  $a0 = $t4
        syscall             # call operating system to perform operation
        addi $t3, $t3, 1    # add next position of array to t3
        beq $t3, $t1, end   # go to end if index == n
        add $t4, $t3, $t0
        lb $t5, 0($t4)      # load value of array element
        j loop 


- bgalame to index++, dld meiosame ta jumps kata 1
- CacheSimulation -> Cache Configuration -> Harvard Architecture
- Simulator -> Settings -> x Delayed branches/loads
- CacheSimulation -> CacheSettings -> Writing Policy -> Write-back-allocate
                                   -> LRU

- Formulas:
    
